{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# RTT vs. Distance Analysis\n",
        "\n",
        "## Introduction\n",
        "The goal of this homework is to investigate the relationship between the Round-Trip Time (RTT) and the physical distance between two network nodes. In this notebook, we measure RTT using ping tests from a Colab VM to various mirror hosts around the world. The distance between the source and each mirror host is computed using their geographic coordinates. then, we will explore various aspects of this relationship, including how latency scales with distance and what other factors might influence RTT.\n",
        "\n",
        "\n",
        "RTT is the time taken for a signal to travel from the source to a destination and back again. It depends on several factors:\n",
        "- **Propagation delay:** The time it takes for a signal to travel through the medium, which is roughly proportional to the physical distance.\n",
        "- **Transmission delay:** Dependent on the packet length and the link’s capacity.\n",
        "- **Processing and queuing delays:** Introduced by routers, switches, and other networking hardware.\n",
        "- **Network congestion and routing inefficiencies.**\n",
        "\n",
        "In theory, a simplified model can be written as:\n",
        "\n",
        "\\[\n",
        "RTT = 2(L/C + d/v) + n\n",
        "\\]\n",
        "\n",
        "where:\n",
        "- \\(d\\) is the distance,\n",
        "- \\(v\\) is the propagation speed ),\n",
        "- \\(L/C) represents the transmission time,\n",
        "- \\(n\\) is additional overhead.\n",
        "\n",
        "In this notebook, we:\n",
        "1. Upload a CSV file containing hostnames and their coordinates.\n",
        "2. Automatically determine the Colab VM’s location using IP geolocation.\n",
        "3. Measure the actual RTT by pinging each host.\n",
        "4. Compute the physical distance from the VM to each host.\n",
        "5. Plot the RTT versus distance.\n",
        "6. Fit several models (linear, quadratic, custom nonlinear, and a Random Forest regression) to compare their performance.\n",
        "\n",
        "By following this approach, we aim to understand not only how RTT scales with distance but also how additional network factors influence the measurements. This analysis can provide insights for optimizing network performance and planning infrastructure improvements.\n",
        "\n"
      ],
      "metadata": {
        "id": "KZ_hoof8MOjB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Install & Import Libraries**"
      ],
      "metadata": {
        "id": "0uneC59LG235"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b6eGQooOGyAl",
        "outputId": "17cee4e3-fec2-4b7d-b78d-a4ea78d024e1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting ping3\n",
            "  Downloading ping3-4.0.8-py3-none-any.whl.metadata (13 kB)\n",
            "Requirement already satisfied: geopy in /usr/local/lib/python3.11/dist-packages (2.4.1)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (2.32.3)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
            "Requirement already satisfied: geographiclib<3,>=1.52 in /usr/local/lib/python3.11/dist-packages (from geopy) (2.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests) (2025.1.31)\n",
            "Requirement already satisfied: numpy>=1.19.5 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.26.4)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.13.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.5.0)\n",
            "Downloading ping3-4.0.8-py3-none-any.whl (14 kB)\n",
            "Installing collected packages: ping3\n",
            "Successfully installed ping3-4.0.8\n",
            "Libraries installed and imported!\n"
          ]
        }
      ],
      "source": [
        "# Install required libraries\n",
        "!pip install ping3 geopy requests scikit-learn\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "from ping3 import ping\n",
        "from geopy.distance import distance\n",
        "import requests\n",
        "from scipy.optimize import curve_fit\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import r2_score\n",
        "\n",
        "# Ensure inline plotting in Colab\n",
        "%matplotlib inline\n",
        "\n",
        "print(\"Libraries installed and imported!\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Upload Your CSV File**"
      ],
      "metadata": {
        "id": "UgLBVDaWG95u"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "import io\n",
        "\n",
        "# Prompt to upload CSV file\n",
        "uploaded = files.upload()\n",
        "\n",
        "#  file is uploaded, read it into a DataFrame.\n",
        "for file_name in uploaded.keys():\n",
        "    print(f\"Uploaded file: {file_name}\")\n",
        "    df_hosts = pd.read_csv(io.StringIO(uploaded[file_name].decode('utf-8')))\n",
        "    break\n",
        "\n",
        "print(\"CSV loaded. DataFrame shape:\", df_hosts.shape)\n",
        "display(df_hosts.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "bI1Zh9JOHD0Q",
        "outputId": "798b9287-a226-4680-d994-f54597f84a19"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-90bca5bc-a2fd-4076-9bcd-9c7370da8965\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-90bca5bc-a2fd-4076-9bcd-9c7370da8965\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving gnu_debian_mirrors.csv to gnu_debian_mirrors.csv\n",
            "Uploaded file: gnu_debian_mirrors.csv\n",
            "CSV loaded. DataFrame shape: (86, 6)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                     hostname         city country  latitude  longitude  \\\n",
              "0  mirror.csclub.uwaterloo.ca     Waterloo  Canada   43.4643   -80.5204   \n",
              "1           mirror.its.dal.ca      Halifax  Canada   44.6488   -63.5752   \n",
              "2  mirror2.evolution-host.com      Toronto  Canada   43.6532   -79.3832   \n",
              "3       mirror.keystealth.org  Los Angeles     USA   34.0522  -118.2437   \n",
              "4    mirrors.ocf.berkeley.edu     Berkeley     USA   37.8715  -122.2730   \n",
              "\n",
              "       Continent  \n",
              "0  North America  \n",
              "1  North America  \n",
              "2  North America  \n",
              "3  North America  \n",
              "4  North America  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d52f1990-66b0-4bc6-a1b2-af20c4370558\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>hostname</th>\n",
              "      <th>city</th>\n",
              "      <th>country</th>\n",
              "      <th>latitude</th>\n",
              "      <th>longitude</th>\n",
              "      <th>Continent</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>mirror.csclub.uwaterloo.ca</td>\n",
              "      <td>Waterloo</td>\n",
              "      <td>Canada</td>\n",
              "      <td>43.4643</td>\n",
              "      <td>-80.5204</td>\n",
              "      <td>North America</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>mirror.its.dal.ca</td>\n",
              "      <td>Halifax</td>\n",
              "      <td>Canada</td>\n",
              "      <td>44.6488</td>\n",
              "      <td>-63.5752</td>\n",
              "      <td>North America</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>mirror2.evolution-host.com</td>\n",
              "      <td>Toronto</td>\n",
              "      <td>Canada</td>\n",
              "      <td>43.6532</td>\n",
              "      <td>-79.3832</td>\n",
              "      <td>North America</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>mirror.keystealth.org</td>\n",
              "      <td>Los Angeles</td>\n",
              "      <td>USA</td>\n",
              "      <td>34.0522</td>\n",
              "      <td>-118.2437</td>\n",
              "      <td>North America</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>mirrors.ocf.berkeley.edu</td>\n",
              "      <td>Berkeley</td>\n",
              "      <td>USA</td>\n",
              "      <td>37.8715</td>\n",
              "      <td>-122.2730</td>\n",
              "      <td>North America</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d52f1990-66b0-4bc6-a1b2-af20c4370558')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d52f1990-66b0-4bc6-a1b2-af20c4370558 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d52f1990-66b0-4bc6-a1b2-af20c4370558');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-045e1a27-20ba-43fb-8778-0a1656331f70\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-045e1a27-20ba-43fb-8778-0a1656331f70')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-045e1a27-20ba-43fb-8778-0a1656331f70 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df_hosts\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"hostname\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"mirror.its.dal.ca\",\n          \"mirrors.ocf.berkeley.edu\",\n          \"mirror2.evolution-host.com\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Halifax\",\n          \"Berkeley\",\n          \"Toronto\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"USA\",\n          \"Canada\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.586452966618104,\n        \"min\": 34.0522,\n        \"max\": 44.6488,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          44.6488,\n          37.8715\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25.985224782941554,\n        \"min\": -122.273,\n        \"max\": -63.5752,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          -63.5752,\n          -122.273\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Continent\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"North America\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Plot Host Distribution by Continent**"
      ],
      "metadata": {
        "id": "PAM2DoAxL4x1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Check the columns to verify the continent column exists\n",
        "print(\"Columns in DataFrame:\", df_hosts.columns.tolist())\n",
        "\n",
        "# If the column name is different, e.g., \"Continent\", adjust below:\n",
        "continent_col = 'Continent'  # Change if needed\n",
        "\n",
        "# Group by the continent column and count the hosts in each group\n",
        "continent_counts = df_hosts[continent_col].value_counts()\n",
        "print(\"\\nHost counts by continent:\")\n",
        "print(continent_counts)\n",
        "\n",
        "# Plot a bar chart for the counts\n",
        "plt.figure(figsize=(8,6))\n",
        "continent_counts.plot(kind='bar', color='skyblue')\n",
        "plt.xlabel(\"Continent\")\n",
        "plt.ylabel(\"Number of Hosts\")\n",
        "plt.title(\"Distribution of Hosts by Continent\")\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 843
        },
        "id": "pqZ-QqpcL6In",
        "outputId": "4cc224f3-02d6-4ca7-88a3-412f87157493"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Columns in DataFrame: ['hostname', 'city', 'country', 'latitude', 'longitude', 'Continent', 'avg_rtt_ms', 'distance_km']\n",
            "\n",
            "Host counts by continent:\n",
            "Continent\n",
            "Europe           45\n",
            "Asia             18\n",
            "North America    13\n",
            "Oceania           4\n",
            "South America     3\n",
            "Africa            3\n",
            "Name: count, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Determine Colab VM’s Coordinates**"
      ],
      "metadata": {
        "id": "XPGi2p5TNhdm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Retrieve public IP of the Colab VM\n",
        "ip = !curl -s ifconfig.me\n",
        "ip = ip[0]\n",
        "print(\"Colab VM IP:\", ip)\n",
        "\n",
        "# Query ip-api.com for geolocation data\n",
        "url = f\"http://ip-api.com/json/{ip}\"\n",
        "response = requests.get(url).json()\n",
        "print(\"Geolocation response:\", response)\n",
        "\n",
        "if response.get(\"status\") == \"success\":\n",
        "    vm_coords = (response[\"lat\"], response[\"lon\"])\n",
        "    print(\"Determined Colab VM Location:\", vm_coords)\n",
        "else:\n",
        "    # Fallback if geolocation fails\n",
        "    vm_coords = (45.4642, 9.1900)  # Example: Milan, Italy\n",
        "    print(\"Failed to determine location. Using default:\", vm_coords)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ht2TVwKLHIGA",
        "outputId": "52af4904-4aaa-4634-f41a-8bb4602cef10"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Colab VM IP: 34.73.79.59\n",
            "Geolocation response: {'status': 'success', 'country': 'United States', 'countryCode': 'US', 'region': 'SC', 'regionName': 'South Carolina', 'city': 'North Charleston', 'zip': '', 'lat': 32.8771, 'lon': -80.013, 'timezone': 'America/New_York', 'isp': 'Google LLC', 'org': 'Google Cloud (us-east1)', 'as': 'AS396982 Google LLC', 'query': '34.73.79.59'}\n",
            "Determined Colab VM Location: (32.8771, -80.013)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Measure RTT for Each Host**"
      ],
      "metadata": {
        "id": "hnTUPtiBHNVI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def measure_rtt(hostname, num_attempts=5):\n",
        "    \"\"\"\n",
        "    Measures the average RTT (in ms) for a given hostname using ping3.\n",
        "    Returns None if no pings succeed.\n",
        "    \"\"\"\n",
        "    rtt_list = []\n",
        "    for i in range(num_attempts):\n",
        "        result = ping(hostname, timeout=2)\n",
        "        if result is not None:\n",
        "            rtt_list.append(result * 1000)  # convert seconds to ms\n",
        "        time.sleep(0.5)  # delay between pings\n",
        "    return np.mean(rtt_list) if rtt_list else None\n",
        "\n",
        "print(\"\\nMeasuring RTT for each host...\")\n",
        "rtt_values = []\n",
        "for idx, row in df_hosts.iterrows():\n",
        "    host = row['hostname']\n",
        "    avg_rtt = measure_rtt(host)\n",
        "    rtt_values.append(avg_rtt)\n",
        "    print(f\"Host: {host} --> Avg RTT: {avg_rtt} ms\")\n",
        "\n",
        "df_hosts['avg_rtt_ms'] = rtt_values\n",
        "display(df_hosts.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "9vxsc6LlHONY",
        "outputId": "719aa35c-c1a5-4a22-a882-bdcea5820889"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Measuring RTT for each host...\n",
            "Host: mirror.csclub.uwaterloo.ca --> Avg RTT: 36.55414581298828 ms\n",
            "Host: mirror.its.dal.ca --> Avg RTT: 94.542662302653 ms\n",
            "Host: mirror2.evolution-host.com --> Avg RTT: 26.31244659423828 ms\n",
            "Host: mirror.keystealth.org --> Avg RTT: 70.61309814453125 ms\n",
            "Host: mirrors.ocf.berkeley.edu --> Avg RTT: 73.0799674987793 ms\n",
            "Host: mirror.team-cymru.com --> Avg RTT: 34.14502143859863 ms\n",
            "Host: gnu.askapache.com --> Avg RTT: 26.583290100097656 ms\n",
            "Host: ftp.wayne.edu --> Avg RTT: None ms\n",
            "Host: mirror.us-midwest-1.nexcess.net --> Avg RTT: 81.39204978942871 ms\n",
            "Host: gnu.mirror.constant.com --> Avg RTT: 18.40968132019043 ms\n",
            "Host: mirror.rit.edu --> Avg RTT: 28.731727600097656 ms\n",
            "Host: mirrors.ibiblio.org --> Avg RTT: 26.949739456176758 ms\n",
            "Host: gnu.c3sl.ufpr.br --> Avg RTT: 123.34485054016113 ms\n",
            "Host: mirror.cedia.org.ec --> Avg RTT: 105.14516830444336 ms\n",
            "Host: mirror.retentionrange.co.bw --> Avg RTT: 233.73955488204956 ms\n",
            "Host: mirror.marwan.ma --> Avg RTT: 134.95415449142456 ms\n",
            "Host: mirror.ufs.ac.za --> Avg RTT: None ms\n",
            "Host: mirrors.nju.edu.cn --> Avg RTT: 281.1793327331543 ms\n",
            "Host: mirrors.ustc.edu.cn --> Avg RTT: 264.3155097961426 ms\n",
            "Host: mirrors.tuna.tsinghua.edu.cn --> Avg RTT: 245.88289260864258 ms\n",
            "Host: mirrors.jcut.edu.cn --> Avg RTT: 281.912899017334 ms\n",
            "Host: mirrors.hopbox.net --> Avg RTT: 242.70343780517578 ms\n",
            "Host: ftp.jaist.ac.jp --> Avg RTT: 172.01495170593262 ms\n",
            "Host: repo.jing.rocks --> Avg RTT: 181.13927841186523 ms\n",
            "Host: mirror.truenetwork.ru --> Avg RTT: 169.14362907409668 ms\n",
            "Host: mirror.freedif.org --> Avg RTT: None ms\n",
            "Host: ftp.kaist.ac.kr --> Avg RTT: 224.76258277893066 ms\n",
            "Host: mirror.ossplanet.net --> Avg RTT: 215.52772521972656 ms\n",
            "Host: ftp.twaren.net --> Avg RTT: None ms\n",
            "Host: mirror.twds.com.tw --> Avg RTT: 193.82519721984863 ms\n",
            "Host: mirror.easyname.at --> Avg RTT: 113.93566131591797 ms\n",
            "Host: mirror.kumi.systems --> Avg RTT: 111.47685050964355 ms\n",
            "Host: ftp.sotirov-bg.net --> Avg RTT: 127.1921157836914 ms\n",
            "Host: ftp.klid.dk --> Avg RTT: None ms\n",
            "Host: mirrors.dotsrc.org --> Avg RTT: 110.49613952636719 ms\n",
            "Host: www.nic.funet.fi --> Avg RTT: 114.10694122314453 ms\n",
            "Host: mirror.ibcp.fr --> Avg RTT: 97.61137962341309 ms\n",
            "Host: mirror.cyberbits.eu --> Avg RTT: 96.11086845397949 ms\n",
            "Host: mirror.dogado.de --> Avg RTT: 106.30044937133789 ms\n",
            "Host: mirror.clientvps.com --> Avg RTT: 117.66777038574219 ms\n",
            "Host: ftp.fau.de --> Avg RTT: 101.83143615722656 ms\n",
            "Host: www.artfiles.org --> Avg RTT: 102.51612663269043 ms\n",
            "Host: ftp-stud.hs-esslingen.de --> Avg RTT: 102.6102066040039 ms\n",
            "Host: mirror.checkdomain.de --> Avg RTT: 103.50265502929688 ms\n",
            "Host: mirror.netcologne.de --> Avg RTT: 100.4995346069336 ms\n",
            "Host: www.gutscheinrausch.de --> Avg RTT: 103.17568778991699 ms\n",
            "Host: ftp.halifax.rwth-aachen.de --> Avg RTT: 102.18091011047363 ms\n",
            "Host: ftp.cc.uoc.gr --> Avg RTT: None ms\n",
            "Host: fosszone.csd.auth.gr --> Avg RTT: 134.3374729156494 ms\n",
            "Host: quantum-mirror.hu --> Avg RTT: 124.74818229675293 ms\n",
            "Host: mirror.ihost.md --> Avg RTT: 128.73430252075195 ms\n",
            "Host: mirror.lyrahosting.com --> Avg RTT: 97.28164672851562 ms\n",
            "Host: ftp.nluug.nl --> Avg RTT: 95.39494514465332 ms\n",
            "Host: ftp.snt.utwente.nl --> Avg RTT: 99.18980598449707 ms\n",
            "Host: gnuftp.uib.no --> Avg RTT: None ms\n",
            "Host: sunsite.icm.edu.pl --> Avg RTT: 114.14518356323242 ms\n",
            "Host: ftp.man.poznan.pl --> Avg RTT: 114.20283317565918 ms\n",
            "Host: ftp.task.gda.pl --> Avg RTT: 119.59309577941895 ms\n",
            "Host: mirrors.up.pt --> Avg RTT: 101.79858207702637 ms\n",
            "Host: ftp.eq.uc.pt --> Avg RTT: None ms\n",
            "Host: mirror.leitecastro.com --> Avg RTT: 96.94056510925293 ms\n",
            "Host: mirrors.nav.ro --> Avg RTT: 126.12133026123047 ms\n",
            "Host: mirror.tochlab.net --> Avg RTT: 128.5988688468933 ms\n",
            "Host: ftp.rediris.es --> Avg RTT: None ms\n",
            "Host: mirror.bahnhof.net --> Avg RTT: 107.00860023498535 ms\n",
            "Host: mirror.accum.se --> Avg RTT: 119.0523624420166 ms\n",
            "Host: mirror.rabisu.com --> Avg RTT: 151.35364532470703 ms\n",
            "Host: www.mirrorservice.org --> Avg RTT: 89.15514945983887 ms\n",
            "Host: ftp-gnu-org.ip-connect.vn.ua --> Avg RTT: 126.07874870300293 ms\n",
            "Host: mirrors.middlendian.com --> Avg RTT: 208.1068992614746 ms\n",
            "Host: mirror.lagoon.nc --> Avg RTT: 246.1472988128662 ms\n",
            "Host: ftp.debian.org --> Avg RTT: 12.537860870361328 ms\n",
            "Host: ftp.uk.debian.org --> Avg RTT: 87.43290901184082 ms\n",
            "Host: ftp.fr.debian.org --> Avg RTT: 95.34926414489746 ms\n",
            "Host: ftp.jp.debian.org --> Avg RTT: 173.3656883239746 ms\n",
            "Host: ftp.ca.debian.org --> Avg RTT: 35.77985763549805 ms\n",
            "Host: ftp.nl.debian.org --> Avg RTT: 98.39162826538086 ms\n",
            "Host: ftp.hk.debian.org --> Avg RTT: 207.54728317260742 ms\n",
            "Host: ftp.br.debian.org --> Avg RTT: 123.30880165100098 ms\n",
            "Host: ftp.in.debian.org --> Avg RTT: 0.0 ms\n",
            "Host: ftp.ru.debian.org --> Avg RTT: 124.17135238647461 ms\n",
            "Host: ftp.se.debian.org --> Avg RTT: 119.28057670593262 ms\n",
            "Host: ftp.it.debian.org --> Avg RTT: 107.17616081237793 ms\n",
            "Host: ftp.ch.debian.org --> Avg RTT: 104.44316864013672 ms\n",
            "Host: ftp.au.debian.org --> Avg RTT: 205.5417537689209 ms\n",
            "Host: ftp.nz.debian.org --> Avg RTT: 220.36185264587402 ms\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                     hostname         city country  latitude  longitude  \\\n",
              "0  mirror.csclub.uwaterloo.ca     Waterloo  Canada   43.4643   -80.5204   \n",
              "1           mirror.its.dal.ca      Halifax  Canada   44.6488   -63.5752   \n",
              "2  mirror2.evolution-host.com      Toronto  Canada   43.6532   -79.3832   \n",
              "3       mirror.keystealth.org  Los Angeles     USA   34.0522  -118.2437   \n",
              "4    mirrors.ocf.berkeley.edu     Berkeley     USA   37.8715  -122.2730   \n",
              "\n",
              "       Continent  avg_rtt_ms  \n",
              "0  North America   36.554146  \n",
              "1  North America   94.542662  \n",
              "2  North America   26.312447  \n",
              "3  North America   70.613098  \n",
              "4  North America   73.079967  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e834b255-4eec-463b-a9d4-11a1674ea78f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>hostname</th>\n",
              "      <th>city</th>\n",
              "      <th>country</th>\n",
              "      <th>latitude</th>\n",
              "      <th>longitude</th>\n",
              "      <th>Continent</th>\n",
              "      <th>avg_rtt_ms</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>mirror.csclub.uwaterloo.ca</td>\n",
              "      <td>Waterloo</td>\n",
              "      <td>Canada</td>\n",
              "      <td>43.4643</td>\n",
              "      <td>-80.5204</td>\n",
              "      <td>North America</td>\n",
              "      <td>36.554146</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>mirror.its.dal.ca</td>\n",
              "      <td>Halifax</td>\n",
              "      <td>Canada</td>\n",
              "      <td>44.6488</td>\n",
              "      <td>-63.5752</td>\n",
              "      <td>North America</td>\n",
              "      <td>94.542662</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>mirror2.evolution-host.com</td>\n",
              "      <td>Toronto</td>\n",
              "      <td>Canada</td>\n",
              "      <td>43.6532</td>\n",
              "      <td>-79.3832</td>\n",
              "      <td>North America</td>\n",
              "      <td>26.312447</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>mirror.keystealth.org</td>\n",
              "      <td>Los Angeles</td>\n",
              "      <td>USA</td>\n",
              "      <td>34.0522</td>\n",
              "      <td>-118.2437</td>\n",
              "      <td>North America</td>\n",
              "      <td>70.613098</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>mirrors.ocf.berkeley.edu</td>\n",
              "      <td>Berkeley</td>\n",
              "      <td>USA</td>\n",
              "      <td>37.8715</td>\n",
              "      <td>-122.2730</td>\n",
              "      <td>North America</td>\n",
              "      <td>73.079967</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e834b255-4eec-463b-a9d4-11a1674ea78f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e834b255-4eec-463b-a9d4-11a1674ea78f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e834b255-4eec-463b-a9d4-11a1674ea78f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b01091bb-1160-48cc-b111-cfdc61bb46bc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b01091bb-1160-48cc-b111-cfdc61bb46bc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b01091bb-1160-48cc-b111-cfdc61bb46bc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df_hosts\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"hostname\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"mirror.its.dal.ca\",\n          \"mirrors.ocf.berkeley.edu\",\n          \"mirror2.evolution-host.com\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Halifax\",\n          \"Berkeley\",\n          \"Toronto\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"USA\",\n          \"Canada\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.586452966618104,\n        \"min\": 34.0522,\n        \"max\": 44.6488,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          44.6488,\n          37.8715\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25.985224782941554,\n        \"min\": -122.273,\n        \"max\": -63.5752,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          -63.5752,\n          -122.273\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Continent\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"North America\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_rtt_ms\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28.11243155590668,\n        \"min\": 26.31244659423828,\n        \"max\": 94.542662302653,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          94.542662302653\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Calculate Distance from the VM’s Location**"
      ],
      "metadata": {
        "id": "oPr3coyUHUY1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Use the Colab VM's coordinates (vm_coords) as the reference location\n",
        "distances_km = []\n",
        "for idx, row in df_hosts.iterrows():\n",
        "    # Make sure your CSV includes 'latitude' and 'longitude'\n",
        "    lat, lon = row['latitude'], row['longitude']\n",
        "    dist_km = distance(vm_coords, (lat, lon)).km\n",
        "    distances_km.append(dist_km)\n",
        "\n",
        "df_hosts['distance_km'] = distances_km\n",
        "print(\"\\nDataFrame after adding distance (km):\")\n",
        "display(df_hosts.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "XLQ1EOY2HXB-",
        "outputId": "6b42544f-1345-4ead-d24f-9be32db7aa6d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "DataFrame after adding distance (km):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                     hostname         city country  latitude  longitude  \\\n",
              "0  mirror.csclub.uwaterloo.ca     Waterloo  Canada   43.4643   -80.5204   \n",
              "1           mirror.its.dal.ca      Halifax  Canada   44.6488   -63.5752   \n",
              "2  mirror2.evolution-host.com      Toronto  Canada   43.6532   -79.3832   \n",
              "3       mirror.keystealth.org  Los Angeles     USA   34.0522  -118.2437   \n",
              "4    mirrors.ocf.berkeley.edu     Berkeley     USA   37.8715  -122.2730   \n",
              "\n",
              "       Continent  avg_rtt_ms  distance_km  \n",
              "0  North America   36.554146  1176.018288  \n",
              "1  North America   94.542662  1929.300756  \n",
              "2  North America   26.312447  1197.430207  \n",
              "3  North America   70.613098  3535.543309  \n",
              "4  North America   73.079967  3847.011901  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e62fc201-1791-4e7d-b06a-b5c76b9500ef\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>hostname</th>\n",
              "      <th>city</th>\n",
              "      <th>country</th>\n",
              "      <th>latitude</th>\n",
              "      <th>longitude</th>\n",
              "      <th>Continent</th>\n",
              "      <th>avg_rtt_ms</th>\n",
              "      <th>distance_km</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>mirror.csclub.uwaterloo.ca</td>\n",
              "      <td>Waterloo</td>\n",
              "      <td>Canada</td>\n",
              "      <td>43.4643</td>\n",
              "      <td>-80.5204</td>\n",
              "      <td>North America</td>\n",
              "      <td>36.554146</td>\n",
              "      <td>1176.018288</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>mirror.its.dal.ca</td>\n",
              "      <td>Halifax</td>\n",
              "      <td>Canada</td>\n",
              "      <td>44.6488</td>\n",
              "      <td>-63.5752</td>\n",
              "      <td>North America</td>\n",
              "      <td>94.542662</td>\n",
              "      <td>1929.300756</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>mirror2.evolution-host.com</td>\n",
              "      <td>Toronto</td>\n",
              "      <td>Canada</td>\n",
              "      <td>43.6532</td>\n",
              "      <td>-79.3832</td>\n",
              "      <td>North America</td>\n",
              "      <td>26.312447</td>\n",
              "      <td>1197.430207</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>mirror.keystealth.org</td>\n",
              "      <td>Los Angeles</td>\n",
              "      <td>USA</td>\n",
              "      <td>34.0522</td>\n",
              "      <td>-118.2437</td>\n",
              "      <td>North America</td>\n",
              "      <td>70.613098</td>\n",
              "      <td>3535.543309</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>mirrors.ocf.berkeley.edu</td>\n",
              "      <td>Berkeley</td>\n",
              "      <td>USA</td>\n",
              "      <td>37.8715</td>\n",
              "      <td>-122.2730</td>\n",
              "      <td>North America</td>\n",
              "      <td>73.079967</td>\n",
              "      <td>3847.011901</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e62fc201-1791-4e7d-b06a-b5c76b9500ef')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e62fc201-1791-4e7d-b06a-b5c76b9500ef button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e62fc201-1791-4e7d-b06a-b5c76b9500ef');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d6e1f569-e3b0-4df7-a96c-c5dc9fc18c61\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d6e1f569-e3b0-4df7-a96c-c5dc9fc18c61')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d6e1f569-e3b0-4df7-a96c-c5dc9fc18c61 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df_hosts\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"hostname\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"mirror.its.dal.ca\",\n          \"mirrors.ocf.berkeley.edu\",\n          \"mirror2.evolution-host.com\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Halifax\",\n          \"Berkeley\",\n          \"Toronto\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"USA\",\n          \"Canada\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.586452966618104,\n        \"min\": 34.0522,\n        \"max\": 44.6488,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          44.6488,\n          37.8715\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25.985224782941554,\n        \"min\": -122.273,\n        \"max\": -63.5752,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          -63.5752,\n          -122.273\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Continent\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"North America\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_rtt_ms\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28.11243155590668,\n        \"min\": 26.31244659423828,\n        \"max\": 94.542662302653,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          94.542662302653\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"distance_km\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1277.6304737866196,\n        \"min\": 1176.0182875138935,\n        \"max\": 3847.011900942634,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1929.3007559560456\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Plot RTT vs. Distance**"
      ],
      "metadata": {
        "id": "EXe8mppLHbrd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Filter out rows with missing RTT data\n",
        "valid_data = df_hosts.dropna(subset=['avg_rtt_ms'])\n",
        "\n",
        "plt.figure(figsize=(8,6))\n",
        "plt.scatter(valid_data['distance_km'], valid_data['avg_rtt_ms'], color='blue', label='Measured RTT')\n",
        "plt.xlabel('Distance (km)')\n",
        "plt.ylabel('RTT (ms)')\n",
        "plt.title('RTT vs. Distance')\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "9D-7i1RlHgYa",
        "outputId": "de148359-a74d-43d0-e501-269f05001a7d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Fit a Linear Model**"
      ],
      "metadata": {
        "id": "KyL49YOjHkfU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Extract arrays for regression\n",
        "distances = valid_data['distance_km'].values\n",
        "rtts = valid_data['avg_rtt_ms'].values\n",
        "\n",
        "# Linear regression using np.polyfit (degree 1)\n",
        "lin_m, lin_b = np.polyfit(distances, rtts, 1)\n",
        "print(f\"Linear Fit: RTT = {lin_m:.3f} * distance + {lin_b:.3f}\")\n",
        "\n",
        "# Generate line for plotting\n",
        "x_line = np.linspace(distances.min(), distances.max(), 100)\n",
        "y_lin = lin_m * x_line + lin_b\n",
        "\n",
        "plt.figure(figsize=(8,6))\n",
        "plt.scatter(distances, rtts, color='blue', label='Measured RTT')\n",
        "plt.plot(x_line, y_lin, color='red', label='Linear Fit')\n",
        "plt.xlabel('Distance (km)')\n",
        "plt.ylabel('RTT (ms)')\n",
        "plt.title('RTT vs. Distance with Linear Fit')\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 581
        },
        "id": "36yzXz5iHlT6",
        "outputId": "fe8a8af6-85c0-486d-f3ee-945a4c377219"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Linear Fit: RTT = 0.014 * distance + 14.373\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Additional Modeling Approaches**"
      ],
      "metadata": {
        "id": "Wvcp2KLQHtg-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Quadratic Model ---\n",
        "poly_coeffs = np.polyfit(distances, rtts, 2)  # degree=2 for quadratic\n",
        "poly_model = np.poly1d(poly_coeffs)\n",
        "y_poly = poly_model(x_line)\n",
        "print(\"Quadratic Fit Coefficients:\", poly_coeffs)\n",
        "\n",
        "# --- Custom Nonlinear Model ---\n",
        "# For example: RTT(d) = alpha * (d^beta) + gamma\n",
        "def custom_model(d, alpha, beta, gamma):\n",
        "    return alpha * (d ** beta) + gamma\n",
        "\n",
        "initial_guess = [0.1, 1.0, 10.0]\n",
        "params, covariance = curve_fit(custom_model, distances, rtts, p0=initial_guess)\n",
        "alpha, beta, gamma_ = params\n",
        "y_custom = custom_model(x_line, alpha, beta, gamma_)\n",
        "print(f\"Custom Nonlinear Model: alpha={alpha:.3f}, beta={beta:.3f}, gamma={gamma_:.3f}\")\n",
        "\n",
        "# --- Random Forest Regression ---\n",
        "rf_model = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "rf_model.fit(distances.reshape(-1, 1), rtts)\n",
        "y_rf = rf_model.predict(x_line.reshape(-1, 1))\n",
        "rf_r2 = r2_score(rtts, rf_model.predict(distances.reshape(-1, 1)))\n",
        "print(f\"Random Forest R^2 Score: {rf_r2:.3f}\")\n",
        "\n",
        "# --- Plot All Models Together ---\n",
        "plt.figure(figsize=(10,7))\n",
        "plt.scatter(distances, rtts, color='blue', label='Measured RTT')\n",
        "plt.plot(x_line, y_lin, 'r-', label='Linear Fit')\n",
        "plt.plot(x_line, y_poly, 'g--', label='Quadratic Fit')\n",
        "plt.plot(x_line, y_custom, 'm-.', label='Custom Nonlinear Fit')\n",
        "plt.plot(x_line, y_rf, 'c:', label='Random Forest Prediction')\n",
        "plt.xlabel('Distance (km)')\n",
        "plt.ylabel('RTT (ms)')\n",
        "plt.title('Comparison of RTT Modeling Approaches')\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "print(\"\\nAdditional Models Discussion:\")\n",
        "print(\"- Linear Model: Simple and interpretable.\")\n",
        "print(\"- Quadratic Model: Captures potential curvature.\")\n",
        "print(\"- Custom Nonlinear: Flexible if the RTT scales nonlinearly with distance.\")\n",
        "print(\"- Random Forest: Machine learning approach for complex relationships.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 797
        },
        "id": "_t4V9JsxHwLk",
        "outputId": "d2c3366e-363e-4241-bfcf-d0a11b335631"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Quadratic Fit Coefficients: [4.38675874e-07 7.53126452e-03 3.36450745e+01]\n",
            "Custom Nonlinear Model: alpha=0.000, beta=1.425, gamma=38.021\n",
            "Random Forest R^2 Score: 0.928\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Additional Models Discussion:\n",
            "- Linear Model: Simple and interpretable.\n",
            "- Quadratic Model: Captures potential curvature.\n",
            "- Custom Nonlinear: Flexible if the RTT scales nonlinearly with distance.\n",
            "- Random Forest: Machine learning approach for complex relationships.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Final Observations and Conclusions**\n",
        "\n",
        "In this project, we analyzed the relationship between RTT and physical distance using a dataset of mirror hosts. Our investigation included several modeling approaches, each with its own strengths and limitations:\n",
        "\n",
        "Linear Model:\n",
        "The linear model is simple and offers a straightforward interpretation by providing a first approximation. It performs well for a rough estimate, though it may underestimate RTT at larger distances or overestimate it at shorter distances when there’s inherent curvature in the data.\n",
        "\n",
        "Quadratic Model:\n",
        "By capturing curvature, the quadratic model can improve upon the linear fit when the data shows a bending trend. This additional flexibility allows it to better match the behavior of RTT over varying distances.\n",
        "\n",
        "Custom Nonlinear Model:\n",
        "This approach strikes a balance between interpretability and flexibility, especially when a power-law or similar functional form is hypothesized. It can capture nonlinear effects while keeping the model parameters meaningful and tied to theoretical expectations.\n",
        "\n",
        "Random Forest Regression:\n",
        "As a machine learning method, Random Forest may offer the best raw predictive performance given sufficient data. However, it functions as a black box, which can make it harder to relate the results directly to theoretical network behavior.\n",
        "\n",
        "Final Observations:\n",
        "\n",
        "The linear model provides a clear, interpretable baseline.\n",
        "More complex models (quadratic and custom nonlinear) can capture nuances such as network congestion, routing, and processing delays that the linear model might miss.\n",
        "\n",
        "\n",
        "Fatemeh Asadi Tirtashi -10960595"
      ],
      "metadata": {
        "id": "J8ppTPJtN9dC"
      }
    }
  ]
}
